//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sample.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Example_ElementServicePersistElementCall: ClientCallUnary {}

fileprivate final class Example_ElementServicePersistElementCallBase: ClientCallUnaryBase<Example_Element, Example_Element>, Example_ElementServicePersistElementCall {
  override class var method: String { return "/example.ElementService/PersistElement" }
}

internal protocol Example_ElementServiceListElementCall: ClientCallUnary {}

fileprivate final class Example_ElementServiceListElementCallBase: ClientCallUnaryBase<Example_ElementFilter, Example_Elements>, Example_ElementServiceListElementCall {
  override class var method: String { return "/example.ElementService/ListElement" }
}


/// Instantiate Example_ElementServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Example_ElementServiceService: ServiceClient {
  /// Synchronous. Unary.
  func persistElement(_ request: Example_Element) throws -> Example_Element
  /// Asynchronous. Unary.
  func persistElement(_ request: Example_Element, completion: @escaping (Example_Element?, CallResult) -> Void) throws -> Example_ElementServicePersistElementCall

  /// Synchronous. Unary.
  func listElement(_ request: Example_ElementFilter) throws -> Example_Elements
  /// Asynchronous. Unary.
  func listElement(_ request: Example_ElementFilter, completion: @escaping (Example_Elements?, CallResult) -> Void) throws -> Example_ElementServiceListElementCall

}

internal final class Example_ElementServiceServiceClient: ServiceClientBase, Example_ElementServiceService {
  /// Synchronous. Unary.
  internal func persistElement(_ request: Example_Element) throws -> Example_Element {
    return try Example_ElementServicePersistElementCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func persistElement(_ request: Example_Element, completion: @escaping (Example_Element?, CallResult) -> Void) throws -> Example_ElementServicePersistElementCall {
    return try Example_ElementServicePersistElementCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listElement(_ request: Example_ElementFilter) throws -> Example_Elements {
    return try Example_ElementServiceListElementCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listElement(_ request: Example_ElementFilter, completion: @escaping (Example_Elements?, CallResult) -> Void) throws -> Example_ElementServiceListElementCall {
    return try Example_ElementServiceListElementCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Example_ElementServiceProvider: ServiceProvider {
  func persistElement(request: Example_Element, session: Example_ElementServicePersistElementSession) throws -> Example_Element
  func listElement(request: Example_ElementFilter, session: Example_ElementServiceListElementSession) throws -> Example_Elements
}

extension Example_ElementServiceProvider {
  internal var serviceName: String { return "example.ElementService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/example.ElementService/PersistElement":
      return try Example_ElementServicePersistElementSessionBase(
        handler: handler,
        providerBlock: { try self.persistElement(request: $0, session: $1 as! Example_ElementServicePersistElementSessionBase) })
          .run()
    case "/example.ElementService/ListElement":
      return try Example_ElementServiceListElementSessionBase(
        handler: handler,
        providerBlock: { try self.listElement(request: $0, session: $1 as! Example_ElementServiceListElementSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Example_ElementServicePersistElementSession: ServerSessionUnary {}

fileprivate final class Example_ElementServicePersistElementSessionBase: ServerSessionUnaryBase<Example_Element, Example_Element>, Example_ElementServicePersistElementSession {}

internal protocol Example_ElementServiceListElementSession: ServerSessionUnary {}

fileprivate final class Example_ElementServiceListElementSessionBase: ServerSessionUnaryBase<Example_ElementFilter, Example_Elements>, Example_ElementServiceListElementSession {}

